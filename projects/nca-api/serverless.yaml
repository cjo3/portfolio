service:
  name: ${env:SLS_SERVICE_NAME}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: ${env:REGION}
  stackName: ${env:SLS_SERVICE_NAME}-stack
  endpointType: regional
  role: ${env:ACCESS_ROLE}
  httpApi:
    name: ${env:SLS_SERVICE_NAME}-httpapi
    payload: '2.0'
    cors:
      allowedOrigins:
        - ${env:CORS_STA_ORIGIN}
        - ${env:CORS_PRO_ORIGIN}
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      allowCredentials: true
      maxAge: 6000

functions:
  contactHandler:
    name: ${env:SLS_SERVICE_NAME}-contactHandler
    handler: v1/index.contactHandler
    events:
      - httpApi:
          path: /contact
          method: POST
  recaptchaHandler:
    name: ${env:SLS_SERVICE_NAME}-recaptchaHandler
    handler: v1/index.recaptchaHandler
    events:
      - httpApi:
          path: /recaptcha
          method: POST

configValidationMode: warn

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  stage: ${env:NODE_ENV}
  domains:
    production: ${env:BASE_DOMAIN}
    staging: sta-${env:BASE_DOMAIN}
    development: dev-${env:BASE_DOMAIN}
  dotenv:
    logging: false
  serverless-offline:
    httpPort: ${env:SLS_OFFLINE_PORT}
    noPrependStageInUrl: true
    resourceRoutes: false
  webpack:
    webpackConfig: webpackConfig.js
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
    keepOutputDirectory: true
  customDomain:
    stage: ${self:custom.stage}
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ${env:BASE_API_URL}
    endpointType: regional
    apiType: http
    autoDomain: true
