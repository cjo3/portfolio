service:
  name: ${env:SERVICE_NAME}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ${env:REGION}
  stackName: ${env:SERVICE_NAME}
  endpointType: regional
  role: ${env:ACCESS_ROLE}
  httpApi:
    name: ${env:GATEWAY_NAME}
    payload: '2.0'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:${env:REGION}:*:table/${env:TABLE_NAME}

functions:
  createOne:
    name: ${env:SERVICE_NAME}-createOne
    handler: index.createOne
    stage: ${env:STAGE}
    events:
      - httpApi:
          path: /${env:RESOURCE_NAME}
          method: POST
  deleteOne:
    name: ${env:SERVICE_NAME}-deleteOne
    handler: index.deleteOne
    stage: ${env:STAGE}
    events:
      - httpApi:
          path: /${env:RESOURCE_NAME}
          method: DELETE
  getAll:
    name: ${env:SERVICE_NAME}-getAll
    handler: index.getAll
    stage: ${env:STAGE}
    events:
      - httpApi:
          path: /${env:RESOURCE_NAME}
          method: GET
  getOne:
    name: ${env:SERVICE_NAME}-getOne
    handler: index.getOne
    stage: ${env:STAGE}
    events:
      - httpApi:
          path: /${env:RESOURCE_NAME}/{id}
          method: GET
  updateOne:
    name: ${env:SERVICE_NAME}-updateOne
    handler: index.updateOne
    stage: ${env:STAGE}
    events:
      - httpApi:
          path: /${env:RESOURCE_NAME}
          method: PUT

configValidationMode: warn

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  dotenv:
    logging: false
  serverless-offline:
    httpPort: ${env:LOCAL_SLS_PORT}
    noPrependStageInUrl: true
    resourceRoutes: true
  webpack:
    webpackConfig: webpackConfig.js
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
    keepOutputDirectory: true
  customDomain:
    domainName: ${env:DOMAIN}
    basePath: ${env:STAGE}
    endpointType: regional
    apiType: http
    autoDomain: true

resources:
  Resources:
    colin30ServicesRenders:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: domain
            AttributeType: S
          - AttributeName: path
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: domain
            KeyType: HASH
          - AttributeName: path
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${env:TABLE_GLOBAL_SECONDARY_INDEX_NAME}
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 1