service:
  name: ${env:SLS_SERVICE_NAME}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: ${env:REGION}
  stackName: ${env:SLS_SERVICE_NAME}Stack
  endpointType: regional
  role: ${env:ACCESS_ROLE}
  httpApi:
    name: ${env:HTTPAPI_NAME}
    payload: '2.0'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3.ListObjects
        - s3:GetObject
      Resource:
        - arn:aws:s3:${env:CDN_BUCKET_NAME}

functions:
  serveBaseHandler:
    name: ${env:SLS_SERVICE_NAME}-serveBaseHandler
    handler: v1/handlers.servePageHandler
    events:
      - httpApi:
          path: /
          method: GET
  # servePathHandler:
  #   name: ${env:SLS_SERVICE_NAME}-servePathHandler
  #   handler: v1/handlers.servePageHandler
  #   events:
  #     - httpApi:
  #         path: /{proxy+}
  #         method: GET

configValidationMode: warn

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  stage: ${env:NODE_ENV}
  domains:
    production: ${env:BASE_URL}
    staging: sta-${env:BASE_URL}
    development: dev-${env:BASE_URL}
  dotenv:
    logging: false
  serverless-offline:
    httpPort: ${env:SLS_OFFLINE_PORT}
    noPrependStageInUrl: true
    resourceRoutes: false
  webpack:
    webpackConfig: webpackConfig.js
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
    keepOutputDirectory: true
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: ${self:custom.stage}
    endpointType: regional
    apiType: http
    autoDomain: true